
ATmega328_USART0_Fast.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00000846  000008da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000846  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080017e  0080017e  00000958  2**0
                  ALLOC
  3 .stab         00000b7c  00000000  00000000  00000958  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c7f  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002153  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002164  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00002d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00002d54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_19>
  50:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 37       	cpi	r26, 0x7E	; 126
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e7       	ldi	r26, 0x7E	; 126
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 38       	cpi	r26, 0x80	; 128
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 21 04 	jmp	0x842	; 0x842 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#define FOSC 16000000 					/*MCU Clock Speed*/
#define BAUD 115200						/*Required Baud Rate*/
#define MYUBRR ((FOSC/16/BAUD)-1)

int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	6c 97       	sbiw	r28, 0x1c	; 28
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	//-------------Inits-------------//
	/*POWER MANAGEMENT*/
	DISABLE_ADC; DISABLE_I2C;			/*Disable ADC*/ /*DISABLE I2C*/
  ba:	84 e6       	ldi	r24, 0x64	; 100
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	24 e6       	ldi	r18, 0x64	; 100
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	20 81       	ld	r18, Z
  c6:	21 60       	ori	r18, 0x01	; 1
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
  cc:	84 e6       	ldi	r24, 0x64	; 100
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	24 e6       	ldi	r18, 0x64	; 100
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	f9 01       	movw	r30, r18
  d6:	20 81       	ld	r18, Z
  d8:	20 68       	ori	r18, 0x80	; 128
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
	DISABLE_SPI; DISABLE_TIMER0;		/*Disable SPI*/ /*DISABLE TIMER0*/
  de:	84 e6       	ldi	r24, 0x64	; 100
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	24 e6       	ldi	r18, 0x64	; 100
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	f9 01       	movw	r30, r18
  e8:	20 81       	ld	r18, Z
  ea:	24 60       	ori	r18, 0x04	; 4
  ec:	fc 01       	movw	r30, r24
  ee:	20 83       	st	Z, r18
  f0:	84 e6       	ldi	r24, 0x64	; 100
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	24 e6       	ldi	r18, 0x64	; 100
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	f9 01       	movw	r30, r18
  fa:	20 81       	ld	r18, Z
  fc:	20 62       	ori	r18, 0x20	; 32
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
	DISABLE_TIMER1; DISABLE_TIMER2;		/*Disable TIMER1*/ /*DISABLE TIMER2*/
 102:	84 e6       	ldi	r24, 0x64	; 100
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	24 e6       	ldi	r18, 0x64	; 100
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	20 81       	ld	r18, Z
 10e:	28 60       	ori	r18, 0x08	; 8
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
 114:	84 e6       	ldi	r24, 0x64	; 100
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	24 e6       	ldi	r18, 0x64	; 100
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	20 64       	ori	r18, 0x40	; 64
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
	ENABLE_USART0;						/*Enable USART0*/
 126:	84 e6       	ldi	r24, 0x64	; 100
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	24 e6       	ldi	r18, 0x64	; 100
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	20 81       	ld	r18, Z
 132:	2d 7f       	andi	r18, 0xFD	; 253
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
	/*GPIO*/
	SET_BIT(DDRB, PB5);					/*Pin PB5 as Output*/
 138:	84 e2       	ldi	r24, 0x24	; 36
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	24 e2       	ldi	r18, 0x24	; 36
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	20 81       	ld	r18, Z
 144:	20 62       	ori	r18, 0x20	; 32
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
	CLEAR_BIT(PORTB, PB5);				/*Clear PB5 Bit*/
 14a:	85 e2       	ldi	r24, 0x25	; 37
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	25 e2       	ldi	r18, 0x25	; 37
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	20 81       	ld	r18, Z
 156:	2f 7d       	andi	r18, 0xDF	; 223
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
	/*UART0*/
	USART0_Init(MYUBRR);
 15c:	87 e0       	ldi	r24, 0x07	; 7
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 b2 01 	call	0x364	; 0x364 <USART0_Init>
	/*Interrupt*/
	SET_BIT(SREG, 7);					/*Enable Interrupt*/
 164:	8f e5       	ldi	r24, 0x5F	; 95
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	2f e5       	ldi	r18, 0x5F	; 95
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	20 81       	ld	r18, Z
 170:	20 68       	ori	r18, 0x80	; 128
 172:	fc 01       	movw	r30, r24
 174:	20 83       	st	Z, r18

	/*USART0 Transmit Example*/
	USART0_Send_Data("This is a simple string literal for testing UART0 in ATMEGA328P");
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 6e 02 	call	0x4dc	; 0x4dc <USART0_Send_Data>
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	a0 ec       	ldi	r26, 0xC0	; 192
 184:	b0 e4       	ldi	r27, 0x40	; 64
 186:	8d 83       	std	Y+5, r24	; 0x05
 188:	9e 83       	std	Y+6, r25	; 0x06
 18a:	af 83       	std	Y+7, r26	; 0x07
 18c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	4a e7       	ldi	r20, 0x7A	; 122
 194:	55 e4       	ldi	r21, 0x45	; 69
 196:	6d 81       	ldd	r22, Y+5	; 0x05
 198:	7e 81       	ldd	r23, Y+6	; 0x06
 19a:	8f 81       	ldd	r24, Y+7	; 0x07
 19c:	98 85       	ldd	r25, Y+8	; 0x08
 19e:	0e 94 8c 03 	call	0x718	; 0x718 <__mulsf3>
 1a2:	dc 01       	movw	r26, r24
 1a4:	cb 01       	movw	r24, r22
 1a6:	89 87       	std	Y+9, r24	; 0x09
 1a8:	9a 87       	std	Y+10, r25	; 0x0a
 1aa:	ab 87       	std	Y+11, r26	; 0x0b
 1ac:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	40 e8       	ldi	r20, 0x80	; 128
 1b4:	5f e3       	ldi	r21, 0x3F	; 63
 1b6:	69 85       	ldd	r22, Y+9	; 0x09
 1b8:	7a 85       	ldd	r23, Y+10	; 0x0a
 1ba:	8b 85       	ldd	r24, Y+11	; 0x0b
 1bc:	9c 85       	ldd	r25, Y+12	; 0x0c
 1be:	0e 94 06 03 	call	0x60c	; 0x60c <__cmpsf2>
 1c2:	88 23       	and	r24, r24
 1c4:	2c f4       	brge	.+10     	; 0x1d0 <main+0x12a>
		__ticks = 1;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	9e 87       	std	Y+14, r25	; 0x0e
 1cc:	8d 87       	std	Y+13, r24	; 0x0d
 1ce:	3f c0       	rjmp	.+126    	; 0x24e <main+0x1a8>
	else if (__tmp > 65535)
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	3f ef       	ldi	r19, 0xFF	; 255
 1d4:	4f e7       	ldi	r20, 0x7F	; 127
 1d6:	57 e4       	ldi	r21, 0x47	; 71
 1d8:	69 85       	ldd	r22, Y+9	; 0x09
 1da:	7a 85       	ldd	r23, Y+10	; 0x0a
 1dc:	8b 85       	ldd	r24, Y+11	; 0x0b
 1de:	9c 85       	ldd	r25, Y+12	; 0x0c
 1e0:	0e 94 87 03 	call	0x70e	; 0x70e <__gesf2>
 1e4:	18 16       	cp	r1, r24
 1e6:	4c f5       	brge	.+82     	; 0x23a <main+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	40 e2       	ldi	r20, 0x20	; 32
 1ee:	51 e4       	ldi	r21, 0x41	; 65
 1f0:	6d 81       	ldd	r22, Y+5	; 0x05
 1f2:	7e 81       	ldd	r23, Y+6	; 0x06
 1f4:	8f 81       	ldd	r24, Y+7	; 0x07
 1f6:	98 85       	ldd	r25, Y+8	; 0x08
 1f8:	0e 94 8c 03 	call	0x718	; 0x718 <__mulsf3>
 1fc:	dc 01       	movw	r26, r24
 1fe:	cb 01       	movw	r24, r22
 200:	bc 01       	movw	r22, r24
 202:	cd 01       	movw	r24, r26
 204:	0e 94 0b 03 	call	0x616	; 0x616 <__fixunssfsi>
 208:	dc 01       	movw	r26, r24
 20a:	cb 01       	movw	r24, r22
 20c:	9e 87       	std	Y+14, r25	; 0x0e
 20e:	8d 87       	std	Y+13, r24	; 0x0d
 210:	0f c0       	rjmp	.+30     	; 0x230 <main+0x18a>
 212:	80 e9       	ldi	r24, 0x90	; 144
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	98 8b       	std	Y+16, r25	; 0x10
 218:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 21a:	8f 85       	ldd	r24, Y+15	; 0x0f
 21c:	98 89       	ldd	r25, Y+16	; 0x10
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x178>
 222:	98 8b       	std	Y+16, r25	; 0x10
 224:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 226:	8d 85       	ldd	r24, Y+13	; 0x0d
 228:	9e 85       	ldd	r25, Y+14	; 0x0e
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	9e 87       	std	Y+14, r25	; 0x0e
 22e:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 230:	8d 85       	ldd	r24, Y+13	; 0x0d
 232:	9e 85       	ldd	r25, Y+14	; 0x0e
 234:	89 2b       	or	r24, r25
 236:	69 f7       	brne	.-38     	; 0x212 <main+0x16c>
 238:	14 c0       	rjmp	.+40     	; 0x262 <main+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 23a:	69 85       	ldd	r22, Y+9	; 0x09
 23c:	7a 85       	ldd	r23, Y+10	; 0x0a
 23e:	8b 85       	ldd	r24, Y+11	; 0x0b
 240:	9c 85       	ldd	r25, Y+12	; 0x0c
 242:	0e 94 0b 03 	call	0x616	; 0x616 <__fixunssfsi>
 246:	dc 01       	movw	r26, r24
 248:	cb 01       	movw	r24, r22
 24a:	9e 87       	std	Y+14, r25	; 0x0e
 24c:	8d 87       	std	Y+13, r24	; 0x0d
 24e:	8d 85       	ldd	r24, Y+13	; 0x0d
 250:	9e 85       	ldd	r25, Y+14	; 0x0e
 252:	9a 8b       	std	Y+18, r25	; 0x12
 254:	89 8b       	std	Y+17, r24	; 0x11
 256:	89 89       	ldd	r24, Y+17	; 0x11
 258:	9a 89       	ldd	r25, Y+18	; 0x12
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0x1b4>
 25e:	9a 8b       	std	Y+18, r25	; 0x12
 260:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(6);
	USART0_Send_Data("With this test we can find performance of UART0 in ATMEGA328P");
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	0e 94 6e 02 	call	0x4dc	; 0x4dc <USART0_Send_Data>

	//-----------Event loop----------//
	while (1)
	{
		/*Blink LED Example*/
		TOGGLE_BIT(PORTB, PB5);
 26a:	85 e2       	ldi	r24, 0x25	; 37
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	25 e2       	ldi	r18, 0x25	; 37
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	f9 01       	movw	r30, r18
 274:	30 81       	ld	r19, Z
 276:	20 e2       	ldi	r18, 0x20	; 32
 278:	23 27       	eor	r18, r19
 27a:	fc 01       	movw	r30, r24
 27c:	20 83       	st	Z, r18
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	aa e7       	ldi	r26, 0x7A	; 122
 284:	b4 e4       	ldi	r27, 0x44	; 68
 286:	89 83       	std	Y+1, r24	; 0x01
 288:	9a 83       	std	Y+2, r25	; 0x02
 28a:	ab 83       	std	Y+3, r26	; 0x03
 28c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	4a e7       	ldi	r20, 0x7A	; 122
 294:	55 e4       	ldi	r21, 0x45	; 69
 296:	69 81       	ldd	r22, Y+1	; 0x01
 298:	7a 81       	ldd	r23, Y+2	; 0x02
 29a:	8b 81       	ldd	r24, Y+3	; 0x03
 29c:	9c 81       	ldd	r25, Y+4	; 0x04
 29e:	0e 94 8c 03 	call	0x718	; 0x718 <__mulsf3>
 2a2:	dc 01       	movw	r26, r24
 2a4:	cb 01       	movw	r24, r22
 2a6:	8b 8b       	std	Y+19, r24	; 0x13
 2a8:	9c 8b       	std	Y+20, r25	; 0x14
 2aa:	ad 8b       	std	Y+21, r26	; 0x15
 2ac:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	40 e8       	ldi	r20, 0x80	; 128
 2b4:	5f e3       	ldi	r21, 0x3F	; 63
 2b6:	6b 89       	ldd	r22, Y+19	; 0x13
 2b8:	7c 89       	ldd	r23, Y+20	; 0x14
 2ba:	8d 89       	ldd	r24, Y+21	; 0x15
 2bc:	9e 89       	ldd	r25, Y+22	; 0x16
 2be:	0e 94 06 03 	call	0x60c	; 0x60c <__cmpsf2>
 2c2:	88 23       	and	r24, r24
 2c4:	2c f4       	brge	.+10     	; 0x2d0 <main+0x22a>
		__ticks = 1;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	98 8f       	std	Y+24, r25	; 0x18
 2cc:	8f 8b       	std	Y+23, r24	; 0x17
 2ce:	3f c0       	rjmp	.+126    	; 0x34e <main+0x2a8>
	else if (__tmp > 65535)
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	3f ef       	ldi	r19, 0xFF	; 255
 2d4:	4f e7       	ldi	r20, 0x7F	; 127
 2d6:	57 e4       	ldi	r21, 0x47	; 71
 2d8:	6b 89       	ldd	r22, Y+19	; 0x13
 2da:	7c 89       	ldd	r23, Y+20	; 0x14
 2dc:	8d 89       	ldd	r24, Y+21	; 0x15
 2de:	9e 89       	ldd	r25, Y+22	; 0x16
 2e0:	0e 94 87 03 	call	0x70e	; 0x70e <__gesf2>
 2e4:	18 16       	cp	r1, r24
 2e6:	4c f5       	brge	.+82     	; 0x33a <main+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	40 e2       	ldi	r20, 0x20	; 32
 2ee:	51 e4       	ldi	r21, 0x41	; 65
 2f0:	69 81       	ldd	r22, Y+1	; 0x01
 2f2:	7a 81       	ldd	r23, Y+2	; 0x02
 2f4:	8b 81       	ldd	r24, Y+3	; 0x03
 2f6:	9c 81       	ldd	r25, Y+4	; 0x04
 2f8:	0e 94 8c 03 	call	0x718	; 0x718 <__mulsf3>
 2fc:	dc 01       	movw	r26, r24
 2fe:	cb 01       	movw	r24, r22
 300:	bc 01       	movw	r22, r24
 302:	cd 01       	movw	r24, r26
 304:	0e 94 0b 03 	call	0x616	; 0x616 <__fixunssfsi>
 308:	dc 01       	movw	r26, r24
 30a:	cb 01       	movw	r24, r22
 30c:	98 8f       	std	Y+24, r25	; 0x18
 30e:	8f 8b       	std	Y+23, r24	; 0x17
 310:	0f c0       	rjmp	.+30     	; 0x330 <main+0x28a>
 312:	80 e9       	ldi	r24, 0x90	; 144
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	9a 8f       	std	Y+26, r25	; 0x1a
 318:	89 8f       	std	Y+25, r24	; 0x19
 31a:	89 8d       	ldd	r24, Y+25	; 0x19
 31c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <main+0x278>
 322:	9a 8f       	std	Y+26, r25	; 0x1a
 324:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 326:	8f 89       	ldd	r24, Y+23	; 0x17
 328:	98 8d       	ldd	r25, Y+24	; 0x18
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	98 8f       	std	Y+24, r25	; 0x18
 32e:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 330:	8f 89       	ldd	r24, Y+23	; 0x17
 332:	98 8d       	ldd	r25, Y+24	; 0x18
 334:	89 2b       	or	r24, r25
 336:	69 f7       	brne	.-38     	; 0x312 <main+0x26c>
 338:	14 c0       	rjmp	.+40     	; 0x362 <main+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 33a:	6b 89       	ldd	r22, Y+19	; 0x13
 33c:	7c 89       	ldd	r23, Y+20	; 0x14
 33e:	8d 89       	ldd	r24, Y+21	; 0x15
 340:	9e 89       	ldd	r25, Y+22	; 0x16
 342:	0e 94 0b 03 	call	0x616	; 0x616 <__fixunssfsi>
 346:	dc 01       	movw	r26, r24
 348:	cb 01       	movw	r24, r22
 34a:	98 8f       	std	Y+24, r25	; 0x18
 34c:	8f 8b       	std	Y+23, r24	; 0x17
 34e:	8f 89       	ldd	r24, Y+23	; 0x17
 350:	98 8d       	ldd	r25, Y+24	; 0x18
 352:	9c 8f       	std	Y+28, r25	; 0x1c
 354:	8b 8f       	std	Y+27, r24	; 0x1b
 356:	8b 8d       	ldd	r24, Y+27	; 0x1b
 358:	9c 8d       	ldd	r25, Y+28	; 0x1c
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <main+0x2b4>
 35e:	9c 8f       	std	Y+28, r25	; 0x1c
 360:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(1000);
	}
 362:	83 cf       	rjmp	.-250    	; 0x26a <main+0x1c4>

00000364 <USART0_Init>:
 * ubrr: Contains desired baud rate for user.
 *
 * returns: It returns nothing.
 */
void USART0_Init(unsigned int ubrr)
{
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	00 d0       	rcall	.+0      	; 0x36a <USART0_Init+0x6>
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	9a 83       	std	Y+2, r25	; 0x02
 370:	89 83       	std	Y+1, r24	; 0x01
	//---------Set baud rate---------//
	ubrr = ubrr + 1;					/*ubrr correction*/
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	9a 83       	std	Y+2, r25	; 0x02
 37a:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = (unsigned char) (ubrr >> 8);
 37c:	85 ec       	ldi	r24, 0xC5	; 197
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	29 81       	ldd	r18, Y+1	; 0x01
 382:	3a 81       	ldd	r19, Y+2	; 0x02
 384:	23 2f       	mov	r18, r19
 386:	33 27       	eor	r19, r19
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) ubrr;
 38c:	84 ec       	ldi	r24, 0xC4	; 196
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	29 81       	ldd	r18, Y+1	; 0x01
 392:	fc 01       	movw	r30, r24
 394:	20 83       	st	Z, r18

	//-----Control Register UCSRnA---//
	CLEAR_BIT(UCSR0A, MPCM0);			/*Disable Multi processor comm mode*/
 396:	80 ec       	ldi	r24, 0xC0	; 192
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	20 ec       	ldi	r18, 0xC0	; 192
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	f9 01       	movw	r30, r18
 3a0:	20 81       	ld	r18, Z
 3a2:	2e 7f       	andi	r18, 0xFE	; 254
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0A, U2X0); 			/*Clock Divider is 16*/
 3a8:	80 ec       	ldi	r24, 0xC0	; 192
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	20 ec       	ldi	r18, 0xC0	; 192
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	f9 01       	movw	r30, r18
 3b2:	20 81       	ld	r18, Z
 3b4:	2d 7f       	andi	r18, 0xFD	; 253
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0A, TXC0); 			/*No Transmission now*/
 3ba:	80 ec       	ldi	r24, 0xC0	; 192
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	20 ec       	ldi	r18, 0xC0	; 192
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	f9 01       	movw	r30, r18
 3c4:	20 81       	ld	r18, Z
 3c6:	2f 7b       	andi	r18, 0xBF	; 191
 3c8:	fc 01       	movw	r30, r24
 3ca:	20 83       	st	Z, r18

	//-----Control Register UCSRnB---//
	CLEAR_BIT(UCSR0B, UCSZ02);			/*Data length is 8 bit*/
 3cc:	81 ec       	ldi	r24, 0xC1	; 193
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	21 ec       	ldi	r18, 0xC1	; 193
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	f9 01       	movw	r30, r18
 3d6:	20 81       	ld	r18, Z
 3d8:	2b 7f       	andi	r18, 0xFB	; 251
 3da:	fc 01       	movw	r30, r24
 3dc:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, RXEN0);			/*Disabled USART0 Receiver*/
 3de:	81 ec       	ldi	r24, 0xC1	; 193
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	21 ec       	ldi	r18, 0xC1	; 193
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	f9 01       	movw	r30, r18
 3e8:	20 81       	ld	r18, Z
 3ea:	2f 7e       	andi	r18, 0xEF	; 239
 3ec:	fc 01       	movw	r30, r24
 3ee:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, UDRIE0);			/*Disabled - Data Buffer Empty Interrupt*/
 3f0:	81 ec       	ldi	r24, 0xC1	; 193
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	21 ec       	ldi	r18, 0xC1	; 193
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	f9 01       	movw	r30, r18
 3fa:	20 81       	ld	r18, Z
 3fc:	2f 7d       	andi	r18, 0xDF	; 223
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, TXCIE0);			/*Disabled - Data transmission completed Interrupt*/
 402:	81 ec       	ldi	r24, 0xC1	; 193
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	21 ec       	ldi	r18, 0xC1	; 193
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	f9 01       	movw	r30, r18
 40c:	20 81       	ld	r18, Z
 40e:	2f 7b       	andi	r18, 0xBF	; 191
 410:	fc 01       	movw	r30, r24
 412:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, RXCIE0);			/*Disabled - Data receive completed Interrupt*/
 414:	81 ec       	ldi	r24, 0xC1	; 193
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	21 ec       	ldi	r18, 0xC1	; 193
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	f9 01       	movw	r30, r18
 41e:	20 81       	ld	r18, Z
 420:	2f 77       	andi	r18, 0x7F	; 127
 422:	fc 01       	movw	r30, r24
 424:	20 83       	st	Z, r18

	//-----Control Register UCSRnC---//
	CLEAR_BIT(UCSR0C, UCPOL0);			/*Async Mode only*/
 426:	82 ec       	ldi	r24, 0xC2	; 194
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	22 ec       	ldi	r18, 0xC2	; 194
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	f9 01       	movw	r30, r18
 430:	20 81       	ld	r18, Z
 432:	2e 7f       	andi	r18, 0xFE	; 254
 434:	fc 01       	movw	r30, r24
 436:	20 83       	st	Z, r18
	/*Data Length*/
	SET_BIT(UCSR0B, UCSZ00);			/*Data length is 8 bit*/
 438:	81 ec       	ldi	r24, 0xC1	; 193
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	21 ec       	ldi	r18, 0xC1	; 193
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	f9 01       	movw	r30, r18
 442:	20 81       	ld	r18, Z
 444:	22 60       	ori	r18, 0x02	; 2
 446:	fc 01       	movw	r30, r24
 448:	20 83       	st	Z, r18
	SET_BIT(UCSR0B, UCSZ01);			/*Data length is 8 bit*/
 44a:	81 ec       	ldi	r24, 0xC1	; 193
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	21 ec       	ldi	r18, 0xC1	; 193
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	f9 01       	movw	r30, r18
 454:	20 81       	ld	r18, Z
 456:	24 60       	ori	r18, 0x04	; 4
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, USBS0);			/*One Stop Bit*/
 45c:	81 ec       	ldi	r24, 0xC1	; 193
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	21 ec       	ldi	r18, 0xC1	; 193
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	f9 01       	movw	r30, r18
 466:	20 81       	ld	r18, Z
 468:	27 7f       	andi	r18, 0xF7	; 247
 46a:	fc 01       	movw	r30, r24
 46c:	20 83       	st	Z, r18
	/*Parity*/
	CLEAR_BIT(UCSR0B, UPM00);			/*Parity - Even*/
 46e:	81 ec       	ldi	r24, 0xC1	; 193
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	21 ec       	ldi	r18, 0xC1	; 193
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	f9 01       	movw	r30, r18
 478:	20 81       	ld	r18, Z
 47a:	2f 7e       	andi	r18, 0xEF	; 239
 47c:	fc 01       	movw	r30, r24
 47e:	20 83       	st	Z, r18
	SET_BIT(UCSR0B, UPM01);				/*Parity - Even*/
 480:	81 ec       	ldi	r24, 0xC1	; 193
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	21 ec       	ldi	r18, 0xC1	; 193
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	f9 01       	movw	r30, r18
 48a:	20 81       	ld	r18, Z
 48c:	20 62       	ori	r18, 0x20	; 32
 48e:	fc 01       	movw	r30, r24
 490:	20 83       	st	Z, r18
	/*Mode Selection*/
	CLEAR_BIT(UCSR0B, UMSEL00);			/*Mode - Async Mode*/
 492:	81 ec       	ldi	r24, 0xC1	; 193
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	21 ec       	ldi	r18, 0xC1	; 193
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	f9 01       	movw	r30, r18
 49c:	20 81       	ld	r18, Z
 49e:	2f 7b       	andi	r18, 0xBF	; 191
 4a0:	fc 01       	movw	r30, r24
 4a2:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, UMSEL01);			/*Mode - Async Mode*/
 4a4:	81 ec       	ldi	r24, 0xC1	; 193
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	21 ec       	ldi	r18, 0xC1	; 193
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	f9 01       	movw	r30, r18
 4ae:	20 81       	ld	r18, Z
 4b0:	2f 77       	andi	r18, 0x7F	; 127
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18

	//----Make Data Register Ready---//
	UDR0 = '\0';						/*Clear Transmit Register*/
 4b6:	86 ec       	ldi	r24, 0xC6	; 198
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	fc 01       	movw	r30, r24
 4bc:	10 82       	st	Z, r1

	//-------Turn On Transmitter-----//
	SET_BIT(UCSR0B, TXEN0);				/*Enabled USART0 Transmitter*/
 4be:	81 ec       	ldi	r24, 0xC1	; 193
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	21 ec       	ldi	r18, 0xC1	; 193
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	f9 01       	movw	r30, r18
 4c8:	20 81       	ld	r18, Z
 4ca:	28 60       	ori	r18, 0x08	; 8
 4cc:	fc 01       	movw	r30, r24
 4ce:	20 83       	st	Z, r18
}
 4d0:	00 00       	nop
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <USART0_Send_Data>:
 * * _data: Pointer to incoming character array.
 *
 * returns: It returns nothing.
 */
void USART0_Send_Data(char * _data)
{
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	00 d0       	rcall	.+0      	; 0x4e2 <USART0_Send_Data+0x6>
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	9a 83       	std	Y+2, r25	; 0x02
 4e8:	89 83       	std	Y+1, r24	; 0x01
	data = _data;
 4ea:	89 81       	ldd	r24, Y+1	; 0x01
 4ec:	9a 81       	ldd	r25, Y+2	; 0x02
 4ee:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <__data_end+0x1>
 4f2:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>

	SET_BIT(UCSR0B, UDRIE0);			/*Enabled - Data Buffer Empty Interrupt*/
 4f6:	81 ec       	ldi	r24, 0xC1	; 193
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	21 ec       	ldi	r18, 0xC1	; 193
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	f9 01       	movw	r30, r18
 500:	20 81       	ld	r18, Z
 502:	20 62       	ori	r18, 0x20	; 32
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
	SET_BIT(UCSR0B, TXCIE0);			/*Enabled - Data transmission completed Interrupt*/
 508:	81 ec       	ldi	r24, 0xC1	; 193
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	21 ec       	ldi	r18, 0xC1	; 193
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	f9 01       	movw	r30, r18
 512:	20 81       	ld	r18, Z
 514:	20 64       	ori	r18, 0x40	; 64
 516:	fc 01       	movw	r30, r24
 518:	20 83       	st	Z, r18
}
 51a:	00 00       	nop
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <__vector_19>:
 * transmitted.
 *
 * retuns: It returns nothing.
 */
ISR(USART_UDRE_vect)
{
 526:	1f 92       	push	r1
 528:	0f 92       	push	r0
 52a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 52e:	0f 92       	push	r0
 530:	11 24       	eor	r1, r1
 532:	2f 93       	push	r18
 534:	3f 93       	push	r19
 536:	4f 93       	push	r20
 538:	5f 93       	push	r21
 53a:	8f 93       	push	r24
 53c:	9f 93       	push	r25
 53e:	ef 93       	push	r30
 540:	ff 93       	push	r31
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
	if(*data != '\0')
 54a:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 54e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 552:	fc 01       	movw	r30, r24
 554:	80 81       	ld	r24, Z
 556:	88 23       	and	r24, r24
 558:	91 f0       	breq	.+36     	; 0x57e <__vector_19+0x58>
	{
		UDR0 = *(data++);				/*Load Next Data Byte*/
 55a:	26 ec       	ldi	r18, 0xC6	; 198
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 562:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <__data_end+0x1>
 566:	ac 01       	movw	r20, r24
 568:	4f 5f       	subi	r20, 0xFF	; 255
 56a:	5f 4f       	sbci	r21, 0xFF	; 255
 56c:	50 93 7f 01 	sts	0x017F, r21	; 0x80017f <__data_end+0x1>
 570:	40 93 7e 01 	sts	0x017E, r20	; 0x80017e <__data_end>
 574:	fc 01       	movw	r30, r24
 576:	80 81       	ld	r24, Z
 578:	f9 01       	movw	r30, r18
 57a:	80 83       	st	Z, r24
	else
	{
		UDR0 = '\n';
		CLEAR_BIT(UCSR0B, UDRIE0);		/*Disabled - Data Buffer Empty Interrupt*/
	}
}
 57c:	0e c0       	rjmp	.+28     	; 0x59a <__vector_19+0x74>
	{
		UDR0 = *(data++);				/*Load Next Data Byte*/
	}
	else
	{
		UDR0 = '\n';
 57e:	86 ec       	ldi	r24, 0xC6	; 198
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	2a e0       	ldi	r18, 0x0A	; 10
 584:	fc 01       	movw	r30, r24
 586:	20 83       	st	Z, r18
		CLEAR_BIT(UCSR0B, UDRIE0);		/*Disabled - Data Buffer Empty Interrupt*/
 588:	81 ec       	ldi	r24, 0xC1	; 193
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	21 ec       	ldi	r18, 0xC1	; 193
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	f9 01       	movw	r30, r18
 592:	20 81       	ld	r18, Z
 594:	2f 7d       	andi	r18, 0xDF	; 223
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
	}
}
 59a:	00 00       	nop
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	ff 91       	pop	r31
 5a2:	ef 91       	pop	r30
 5a4:	9f 91       	pop	r25
 5a6:	8f 91       	pop	r24
 5a8:	5f 91       	pop	r21
 5aa:	4f 91       	pop	r20
 5ac:	3f 91       	pop	r19
 5ae:	2f 91       	pop	r18
 5b0:	0f 90       	pop	r0
 5b2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 5b6:	0f 90       	pop	r0
 5b8:	1f 90       	pop	r1
 5ba:	18 95       	reti

000005bc <__vector_20>:
 * bytes are transmitted.
 *
 * retuns: It returns nothing.
 */
ISR(USART_TX_vect)
{
 5bc:	1f 92       	push	r1
 5be:	0f 92       	push	r0
 5c0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 5c4:	0f 92       	push	r0
 5c6:	11 24       	eor	r1, r1
 5c8:	2f 93       	push	r18
 5ca:	3f 93       	push	r19
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	cd b7       	in	r28, 0x3d	; 61
 5da:	de b7       	in	r29, 0x3e	; 62
	/* The TXCn Flag bit is automatically cleared,
	 * when a transmit complete interrupt is executed
	 */

	CLEAR_BIT(UCSR0B, TXCIE0);			/*Disabled - Data transmission completed Interrupt*/
 5dc:	81 ec       	ldi	r24, 0xC1	; 193
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	21 ec       	ldi	r18, 0xC1	; 193
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	f9 01       	movw	r30, r18
 5e6:	20 81       	ld	r18, Z
 5e8:	2f 7b       	andi	r18, 0xBF	; 191
 5ea:	fc 01       	movw	r30, r24
 5ec:	20 83       	st	Z, r18
}
 5ee:	00 00       	nop
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	ff 91       	pop	r31
 5f6:	ef 91       	pop	r30
 5f8:	9f 91       	pop	r25
 5fa:	8f 91       	pop	r24
 5fc:	3f 91       	pop	r19
 5fe:	2f 91       	pop	r18
 600:	0f 90       	pop	r0
 602:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <__cmpsf2>:
 60c:	0e 94 3a 03 	call	0x674	; 0x674 <__fp_cmp>
 610:	08 f4       	brcc	.+2      	; 0x614 <__cmpsf2+0x8>
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	08 95       	ret

00000616 <__fixunssfsi>:
 616:	0e 94 66 03 	call	0x6cc	; 0x6cc <__fp_splitA>
 61a:	88 f0       	brcs	.+34     	; 0x63e <__fixunssfsi+0x28>
 61c:	9f 57       	subi	r25, 0x7F	; 127
 61e:	98 f0       	brcs	.+38     	; 0x646 <__fixunssfsi+0x30>
 620:	b9 2f       	mov	r27, r25
 622:	99 27       	eor	r25, r25
 624:	b7 51       	subi	r27, 0x17	; 23
 626:	b0 f0       	brcs	.+44     	; 0x654 <__fixunssfsi+0x3e>
 628:	e1 f0       	breq	.+56     	; 0x662 <__fixunssfsi+0x4c>
 62a:	66 0f       	add	r22, r22
 62c:	77 1f       	adc	r23, r23
 62e:	88 1f       	adc	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	1a f0       	brmi	.+6      	; 0x63a <__fixunssfsi+0x24>
 634:	ba 95       	dec	r27
 636:	c9 f7       	brne	.-14     	; 0x62a <__fixunssfsi+0x14>
 638:	14 c0       	rjmp	.+40     	; 0x662 <__fixunssfsi+0x4c>
 63a:	b1 30       	cpi	r27, 0x01	; 1
 63c:	91 f0       	breq	.+36     	; 0x662 <__fixunssfsi+0x4c>
 63e:	0e 94 80 03 	call	0x700	; 0x700 <__fp_zero>
 642:	b1 e0       	ldi	r27, 0x01	; 1
 644:	08 95       	ret
 646:	0c 94 80 03 	jmp	0x700	; 0x700 <__fp_zero>
 64a:	67 2f       	mov	r22, r23
 64c:	78 2f       	mov	r23, r24
 64e:	88 27       	eor	r24, r24
 650:	b8 5f       	subi	r27, 0xF8	; 248
 652:	39 f0       	breq	.+14     	; 0x662 <__fixunssfsi+0x4c>
 654:	b9 3f       	cpi	r27, 0xF9	; 249
 656:	cc f3       	brlt	.-14     	; 0x64a <__fixunssfsi+0x34>
 658:	86 95       	lsr	r24
 65a:	77 95       	ror	r23
 65c:	67 95       	ror	r22
 65e:	b3 95       	inc	r27
 660:	d9 f7       	brne	.-10     	; 0x658 <__fixunssfsi+0x42>
 662:	3e f4       	brtc	.+14     	; 0x672 <__fixunssfsi+0x5c>
 664:	90 95       	com	r25
 666:	80 95       	com	r24
 668:	70 95       	com	r23
 66a:	61 95       	neg	r22
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	8f 4f       	sbci	r24, 0xFF	; 255
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	08 95       	ret

00000674 <__fp_cmp>:
 674:	99 0f       	add	r25, r25
 676:	00 08       	sbc	r0, r0
 678:	55 0f       	add	r21, r21
 67a:	aa 0b       	sbc	r26, r26
 67c:	e0 e8       	ldi	r30, 0x80	; 128
 67e:	fe ef       	ldi	r31, 0xFE	; 254
 680:	16 16       	cp	r1, r22
 682:	17 06       	cpc	r1, r23
 684:	e8 07       	cpc	r30, r24
 686:	f9 07       	cpc	r31, r25
 688:	c0 f0       	brcs	.+48     	; 0x6ba <__fp_cmp+0x46>
 68a:	12 16       	cp	r1, r18
 68c:	13 06       	cpc	r1, r19
 68e:	e4 07       	cpc	r30, r20
 690:	f5 07       	cpc	r31, r21
 692:	98 f0       	brcs	.+38     	; 0x6ba <__fp_cmp+0x46>
 694:	62 1b       	sub	r22, r18
 696:	73 0b       	sbc	r23, r19
 698:	84 0b       	sbc	r24, r20
 69a:	95 0b       	sbc	r25, r21
 69c:	39 f4       	brne	.+14     	; 0x6ac <__fp_cmp+0x38>
 69e:	0a 26       	eor	r0, r26
 6a0:	61 f0       	breq	.+24     	; 0x6ba <__fp_cmp+0x46>
 6a2:	23 2b       	or	r18, r19
 6a4:	24 2b       	or	r18, r20
 6a6:	25 2b       	or	r18, r21
 6a8:	21 f4       	brne	.+8      	; 0x6b2 <__fp_cmp+0x3e>
 6aa:	08 95       	ret
 6ac:	0a 26       	eor	r0, r26
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <__fp_cmp+0x3e>
 6b0:	a1 40       	sbci	r26, 0x01	; 1
 6b2:	a6 95       	lsr	r26
 6b4:	8f ef       	ldi	r24, 0xFF	; 255
 6b6:	81 1d       	adc	r24, r1
 6b8:	81 1d       	adc	r24, r1
 6ba:	08 95       	ret

000006bc <__fp_split3>:
 6bc:	57 fd       	sbrc	r21, 7
 6be:	90 58       	subi	r25, 0x80	; 128
 6c0:	44 0f       	add	r20, r20
 6c2:	55 1f       	adc	r21, r21
 6c4:	59 f0       	breq	.+22     	; 0x6dc <__fp_splitA+0x10>
 6c6:	5f 3f       	cpi	r21, 0xFF	; 255
 6c8:	71 f0       	breq	.+28     	; 0x6e6 <__fp_splitA+0x1a>
 6ca:	47 95       	ror	r20

000006cc <__fp_splitA>:
 6cc:	88 0f       	add	r24, r24
 6ce:	97 fb       	bst	r25, 7
 6d0:	99 1f       	adc	r25, r25
 6d2:	61 f0       	breq	.+24     	; 0x6ec <__fp_splitA+0x20>
 6d4:	9f 3f       	cpi	r25, 0xFF	; 255
 6d6:	79 f0       	breq	.+30     	; 0x6f6 <__fp_splitA+0x2a>
 6d8:	87 95       	ror	r24
 6da:	08 95       	ret
 6dc:	12 16       	cp	r1, r18
 6de:	13 06       	cpc	r1, r19
 6e0:	14 06       	cpc	r1, r20
 6e2:	55 1f       	adc	r21, r21
 6e4:	f2 cf       	rjmp	.-28     	; 0x6ca <__fp_split3+0xe>
 6e6:	46 95       	lsr	r20
 6e8:	f1 df       	rcall	.-30     	; 0x6cc <__fp_splitA>
 6ea:	08 c0       	rjmp	.+16     	; 0x6fc <__fp_splitA+0x30>
 6ec:	16 16       	cp	r1, r22
 6ee:	17 06       	cpc	r1, r23
 6f0:	18 06       	cpc	r1, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	f1 cf       	rjmp	.-30     	; 0x6d8 <__fp_splitA+0xc>
 6f6:	86 95       	lsr	r24
 6f8:	71 05       	cpc	r23, r1
 6fa:	61 05       	cpc	r22, r1
 6fc:	08 94       	sec
 6fe:	08 95       	ret

00000700 <__fp_zero>:
 700:	e8 94       	clt

00000702 <__fp_szero>:
 702:	bb 27       	eor	r27, r27
 704:	66 27       	eor	r22, r22
 706:	77 27       	eor	r23, r23
 708:	cb 01       	movw	r24, r22
 70a:	97 f9       	bld	r25, 7
 70c:	08 95       	ret

0000070e <__gesf2>:
 70e:	0e 94 3a 03 	call	0x674	; 0x674 <__fp_cmp>
 712:	08 f4       	brcc	.+2      	; 0x716 <__gesf2+0x8>
 714:	8f ef       	ldi	r24, 0xFF	; 255
 716:	08 95       	ret

00000718 <__mulsf3>:
 718:	0e 94 9f 03 	call	0x73e	; 0x73e <__mulsf3x>
 71c:	0c 94 10 04 	jmp	0x820	; 0x820 <__fp_round>
 720:	0e 94 02 04 	call	0x804	; 0x804 <__fp_pscA>
 724:	38 f0       	brcs	.+14     	; 0x734 <__mulsf3+0x1c>
 726:	0e 94 09 04 	call	0x812	; 0x812 <__fp_pscB>
 72a:	20 f0       	brcs	.+8      	; 0x734 <__mulsf3+0x1c>
 72c:	95 23       	and	r25, r21
 72e:	11 f0       	breq	.+4      	; 0x734 <__mulsf3+0x1c>
 730:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__fp_inf>
 734:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__fp_nan>
 738:	11 24       	eor	r1, r1
 73a:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_szero>

0000073e <__mulsf3x>:
 73e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_split3>
 742:	70 f3       	brcs	.-36     	; 0x720 <__mulsf3+0x8>

00000744 <__mulsf3_pse>:
 744:	95 9f       	mul	r25, r21
 746:	c1 f3       	breq	.-16     	; 0x738 <__mulsf3+0x20>
 748:	95 0f       	add	r25, r21
 74a:	50 e0       	ldi	r21, 0x00	; 0
 74c:	55 1f       	adc	r21, r21
 74e:	62 9f       	mul	r22, r18
 750:	f0 01       	movw	r30, r0
 752:	72 9f       	mul	r23, r18
 754:	bb 27       	eor	r27, r27
 756:	f0 0d       	add	r31, r0
 758:	b1 1d       	adc	r27, r1
 75a:	63 9f       	mul	r22, r19
 75c:	aa 27       	eor	r26, r26
 75e:	f0 0d       	add	r31, r0
 760:	b1 1d       	adc	r27, r1
 762:	aa 1f       	adc	r26, r26
 764:	64 9f       	mul	r22, r20
 766:	66 27       	eor	r22, r22
 768:	b0 0d       	add	r27, r0
 76a:	a1 1d       	adc	r26, r1
 76c:	66 1f       	adc	r22, r22
 76e:	82 9f       	mul	r24, r18
 770:	22 27       	eor	r18, r18
 772:	b0 0d       	add	r27, r0
 774:	a1 1d       	adc	r26, r1
 776:	62 1f       	adc	r22, r18
 778:	73 9f       	mul	r23, r19
 77a:	b0 0d       	add	r27, r0
 77c:	a1 1d       	adc	r26, r1
 77e:	62 1f       	adc	r22, r18
 780:	83 9f       	mul	r24, r19
 782:	a0 0d       	add	r26, r0
 784:	61 1d       	adc	r22, r1
 786:	22 1f       	adc	r18, r18
 788:	74 9f       	mul	r23, r20
 78a:	33 27       	eor	r19, r19
 78c:	a0 0d       	add	r26, r0
 78e:	61 1d       	adc	r22, r1
 790:	23 1f       	adc	r18, r19
 792:	84 9f       	mul	r24, r20
 794:	60 0d       	add	r22, r0
 796:	21 1d       	adc	r18, r1
 798:	82 2f       	mov	r24, r18
 79a:	76 2f       	mov	r23, r22
 79c:	6a 2f       	mov	r22, r26
 79e:	11 24       	eor	r1, r1
 7a0:	9f 57       	subi	r25, 0x7F	; 127
 7a2:	50 40       	sbci	r21, 0x00	; 0
 7a4:	9a f0       	brmi	.+38     	; 0x7cc <__mulsf3_pse+0x88>
 7a6:	f1 f0       	breq	.+60     	; 0x7e4 <__mulsf3_pse+0xa0>
 7a8:	88 23       	and	r24, r24
 7aa:	4a f0       	brmi	.+18     	; 0x7be <__mulsf3_pse+0x7a>
 7ac:	ee 0f       	add	r30, r30
 7ae:	ff 1f       	adc	r31, r31
 7b0:	bb 1f       	adc	r27, r27
 7b2:	66 1f       	adc	r22, r22
 7b4:	77 1f       	adc	r23, r23
 7b6:	88 1f       	adc	r24, r24
 7b8:	91 50       	subi	r25, 0x01	; 1
 7ba:	50 40       	sbci	r21, 0x00	; 0
 7bc:	a9 f7       	brne	.-22     	; 0x7a8 <__mulsf3_pse+0x64>
 7be:	9e 3f       	cpi	r25, 0xFE	; 254
 7c0:	51 05       	cpc	r21, r1
 7c2:	80 f0       	brcs	.+32     	; 0x7e4 <__mulsf3_pse+0xa0>
 7c4:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__fp_inf>
 7c8:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_szero>
 7cc:	5f 3f       	cpi	r21, 0xFF	; 255
 7ce:	e4 f3       	brlt	.-8      	; 0x7c8 <__mulsf3_pse+0x84>
 7d0:	98 3e       	cpi	r25, 0xE8	; 232
 7d2:	d4 f3       	brlt	.-12     	; 0x7c8 <__mulsf3_pse+0x84>
 7d4:	86 95       	lsr	r24
 7d6:	77 95       	ror	r23
 7d8:	67 95       	ror	r22
 7da:	b7 95       	ror	r27
 7dc:	f7 95       	ror	r31
 7de:	e7 95       	ror	r30
 7e0:	9f 5f       	subi	r25, 0xFF	; 255
 7e2:	c1 f7       	brne	.-16     	; 0x7d4 <__mulsf3_pse+0x90>
 7e4:	fe 2b       	or	r31, r30
 7e6:	88 0f       	add	r24, r24
 7e8:	91 1d       	adc	r25, r1
 7ea:	96 95       	lsr	r25
 7ec:	87 95       	ror	r24
 7ee:	97 f9       	bld	r25, 7
 7f0:	08 95       	ret

000007f2 <__fp_inf>:
 7f2:	97 f9       	bld	r25, 7
 7f4:	9f 67       	ori	r25, 0x7F	; 127
 7f6:	80 e8       	ldi	r24, 0x80	; 128
 7f8:	70 e0       	ldi	r23, 0x00	; 0
 7fa:	60 e0       	ldi	r22, 0x00	; 0
 7fc:	08 95       	ret

000007fe <__fp_nan>:
 7fe:	9f ef       	ldi	r25, 0xFF	; 255
 800:	80 ec       	ldi	r24, 0xC0	; 192
 802:	08 95       	ret

00000804 <__fp_pscA>:
 804:	00 24       	eor	r0, r0
 806:	0a 94       	dec	r0
 808:	16 16       	cp	r1, r22
 80a:	17 06       	cpc	r1, r23
 80c:	18 06       	cpc	r1, r24
 80e:	09 06       	cpc	r0, r25
 810:	08 95       	ret

00000812 <__fp_pscB>:
 812:	00 24       	eor	r0, r0
 814:	0a 94       	dec	r0
 816:	12 16       	cp	r1, r18
 818:	13 06       	cpc	r1, r19
 81a:	14 06       	cpc	r1, r20
 81c:	05 06       	cpc	r0, r21
 81e:	08 95       	ret

00000820 <__fp_round>:
 820:	09 2e       	mov	r0, r25
 822:	03 94       	inc	r0
 824:	00 0c       	add	r0, r0
 826:	11 f4       	brne	.+4      	; 0x82c <__fp_round+0xc>
 828:	88 23       	and	r24, r24
 82a:	52 f0       	brmi	.+20     	; 0x840 <__fp_round+0x20>
 82c:	bb 0f       	add	r27, r27
 82e:	40 f4       	brcc	.+16     	; 0x840 <__fp_round+0x20>
 830:	bf 2b       	or	r27, r31
 832:	11 f4       	brne	.+4      	; 0x838 <__fp_round+0x18>
 834:	60 ff       	sbrs	r22, 0
 836:	04 c0       	rjmp	.+8      	; 0x840 <__fp_round+0x20>
 838:	6f 5f       	subi	r22, 0xFF	; 255
 83a:	7f 4f       	sbci	r23, 0xFF	; 255
 83c:	8f 4f       	sbci	r24, 0xFF	; 255
 83e:	9f 4f       	sbci	r25, 0xFF	; 255
 840:	08 95       	ret

00000842 <_exit>:
 842:	f8 94       	cli

00000844 <__stop_program>:
 844:	ff cf       	rjmp	.-2      	; 0x844 <__stop_program>
